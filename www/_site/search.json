[
  {
    "objectID": "first-observations.html",
    "href": "first-observations.html",
    "title": "Getting Started",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We’ll learn a few rules and look for patterns to get an understanding of what things do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation. (Sidenote: this is actually a Quarto website that looks like a book - books are better for cross-referencing chapters, figures, equations, and references so that might be an option for you to explore too.)\nWe’ll start our exploration online looking at the website architecture and GitHub repository. Then we’ll copy and set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter)."
  },
  {
    "objectID": "first-observations.html#exploring-online",
    "href": "first-observations.html#exploring-online",
    "title": "Getting Started",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 6 things you can see on the left sidebar:\n\nWelcome\nFirst Observations\nQuarto Overview\nBasic Workflows\nRender vs. Preview\nTransition from RMarkdown\n\nMost of these are pages, but you’ll see that “Basic Workflows” has an arrow; it is a folder with additional pages inside.\n\n\nThe website’s repo\nLet’s go to this website’s GitHub repository (also called a “repo”), https://github.com/openscapes/quarto-website-tutorial. From this website, you can get to the repo by clicking the GitHub octocat icon underneath the Openscapes logo (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we’ve seen above, and they have red arrows marking them in the image below. You’ll see the “basic-workflows” folder and the rest in this site are .md files, which are plain Markdown files. index.md is the home page.\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .md files we were just exploring. ; this is where Quarto stores files to build the website and"
  },
  {
    "objectID": "first-observations.html#quarto.yml-intro",
    "href": "first-observations.html#quarto.yml-intro",
    "title": "Getting Started",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website’s configuration file. It is a directory of the order that the pages/chapters will be in. This is where you update the organization of your website. If we compare side-by-side, you’ll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe’ll learn more about how to interact with _quarto.yml in the Quarto Overview."
  },
  {
    "objectID": "first-observations.html#fork-to-your-account",
    "href": "first-observations.html#fork-to-your-account",
    "title": "Getting Started",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet’s start with an existing Quarto site and copy it into your space to edit. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nApproach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you’ve got a copy of your repo of choice in your own GitHub account, and you’re set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can’t fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you’ll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green “Code” button and select “Download ZIP”. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you’d like. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you’re logged in, github.com will show a green button that says “New” which you’ll also see as you navigate to your username’s repository page.\n\n\nAdd template site files\nTo use the GitHub file uploader, click the button next to the green “Code” button that says “Add file”. Add file > Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you’re working in the browser.\nNote: if you’re comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that can be preferable to the uploader, which does have limitations with complex repos (although the uploader works fine with this tutorial repo).\n\n\nSet up GitHub publishing\nIf you’ve used the GitHub uploader, you are not quite set up for publishing. We’ll do this in a few steps: we’ll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository in blue at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file > Create new file. Name it exactly this: .github/workflows/quarto-render.yml\nStart by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-render.yml.\nNow you’ll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\nname: Render and deploy quarto files\non: \n  push:\n  pull_request:\n\njobs:\n  quarto-render-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Install Quarto and render project\"\n      uses: nasa-openscapes/quarto-render@v0.9.46 \n\n    - name: \"Deploy to gh-pages\"\n      uses: peaceiris/actions-gh-pages@v3\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./_site\nCommit this to save your new quarto-render.yml file. This is your GitHub Action.\nNext, we’ll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green “Code” button, click the button that says “main”. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says “Create branch: gh-pages from main”.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under “Source”, select gh-pages root, and press Save. You’ll then see a green highlighted text saying that your site is published at a “github.io” url ."
  },
  {
    "objectID": "first-observations.html#confirm",
    "href": "first-observations.html#confirm",
    "title": "Getting Started",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You’ll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you might need to make a small commit to trigger the GitHub Actions build. If this is the case, click the pencil on the top-right of the README.md file as circled in the image below, add some small edit (like a space after a period), and scroll down to click commit. Now you should see the orange dot.\n\n\n\n\n\nWhen your orange do becomes a green check, you can go inspect your published site at “https://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build"
  },
  {
    "objectID": "first-observations.html#renaming-your-repo",
    "href": "first-observations.html#renaming-your-repo",
    "title": "Getting Started",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you’d like to rename your repo, go to Settings and the option to rename is on the top of the main settings page.\n\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown."
  },
  {
    "objectID": "render-vs-preview.html",
    "href": "render-vs-preview.html",
    "title": "Render vs. Preview",
    "section": "",
    "text": "Making quarto websites involves terminology that might be unfamiliar. This is a light explainer to help you get going.\nAs you work locally, you will save your files as you normally do. Saving writes your work to disk."
  },
  {
    "objectID": "render-vs-preview.html#render",
    "href": "render-vs-preview.html#render",
    "title": "Render vs. Preview",
    "section": "Render",
    "text": "Render\nRendering is when Quarto formats your document into something different (e.g. .html or .docx)."
  },
  {
    "objectID": "render-vs-preview.html#preview",
    "href": "render-vs-preview.html#preview",
    "title": "Render vs. Preview",
    "section": "Preview",
    "text": "Preview\nPreview is when Quarto displays the rendered files. It’s like saying “show me”."
  },
  {
    "objectID": "render-vs-preview.html#when-do-i-want-render-vs-preview",
    "href": "render-vs-preview.html#when-do-i-want-render-vs-preview",
    "title": "Render vs. Preview",
    "section": "When do I want Render vs Preview?",
    "text": "When do I want Render vs Preview?\nFrom the RStudio IDE, the “Render” button does both Render + Preview together.\nFrom Jupyter, you’ll need to do these in two steps, render to make the formatted document, and preview to view it.\nFrom GitHub.com, Quarto will only be able to render when published (through a GitHub Action). This means you cannot preview before publishing online."
  },
  {
    "objectID": "transition-from-rmarkdown.html",
    "href": "transition-from-rmarkdown.html",
    "title": "Transition from RMarkdown",
    "section": "",
    "text": "TODO: develop\nYou may already have workflows in RMarkdown and are interested in transitioning to Quarto.\nThere’s no hurry to migrate to Quarto. Keep using Rmarkdown and when you’re ready the migration will be fine."
  },
  {
    "objectID": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "href": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Bookdown to quarto",
    "text": "Bookdown to quarto\ncreate _quarto.yml\nProject options > build tools > project build tools > none\nReload project\nDon’t need to delete anything immediately, but look at output.yml, purge afterbody.\nBookdown might be most challenging because of citations and cross-refs but still not that hard\n\nGitHub actions\nR"
  },
  {
    "objectID": "transition-from-rmarkdown.html#distill-to-quarto",
    "href": "transition-from-rmarkdown.html#distill-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Distill to quarto",
    "text": "Distill to quarto\nUpcoming"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SSEEP",
    "section": "",
    "text": "The Survey SImulation Experimentation and Evaluation Project (SSEEP) is a CINAR-funded multi-institutional partnership project, led by Dr. Gavin Fay at the University of Massachusetts Dartmouth School for Marine Science and Technology as part of a BOEM-NOAA interagency agreement to develop a strategy for mitigating the effects of offshore wind energy development on NOAA Fisheries scientific surveys.\nBegun in 2021, and focusing on the Northeast Fisheries Science Center’s Bottom Trawl Surveys, SSEEP will use a participatory design approach to develop and apply a simulation modeling framework to quantify the likely impacts to NEFSC bottom trawl surveys and data products resulting from interactions with offshore wind development areas, and to evaluate through the simulation how these impacts can be mitigated to maintain data streams that inform best available science for fisheries and ecosystem decision-making. The modeling work is being guided through a series of stakeholder workshops and engagement with an expert Steering Committee.\nSee the Project Overview for more description of SSEEP, learn about the Project Team, and the year 1 Stakeholder Workshops."
  },
  {
    "objectID": "basic-workflows/browser.html",
    "href": "basic-workflows/browser.html",
    "title": "From GitHub.com",
    "section": "",
    "text": "A workflow from the browser if good for getting started (since you do not need to install additional software) and for making small contributions, but is definitely limited. Once you feel comfortable here, you can move to a different setup.\nHere’s an example of editing content on an existing page."
  },
  {
    "objectID": "basic-workflows/browser.html#edit-content-on-an-existing-page",
    "href": "basic-workflows/browser.html#edit-content-on-an-existing-page",
    "title": "From GitHub.com",
    "section": "Edit content on an existing page",
    "text": "Edit content on an existing page\nLet’s change the date on the home page of this website.\nIn your repository, navigate to index.md. Then, click the pencil icon in the top left to edit directly.\n\n\n\n\n\nWe are now in the “Edit file” tab of the editor, where we can make modifications. Let’s change the date to today’s date. Click the “Preview” tab to see your changes. You can even check the “Show diff” box on the right side to see the changes you’ve made.\n\n\n\n\n\nWhile you’re here, see if there are additional changes to the text you’d like to make. Maybe changing the title or author at the top, or for the main text on the home page of the website.\nOur index.md file is written in Markdown, which enables you to make simple text formatting. As you go back and forth from “Edit file” to “Preview”, notice the patterns of how the Markdown text looks when it is as source (“Edit file”) and when it is formatted (“Preview”). For example, in Markdown, you can make text as a header with # symbols, bold or italic with * symbols, and hyperlinks with [](). Notice that spacing is important: for example, there are carriage returns (when you hit the “return” key) before any bullet points. You can learn the short list of Markdown rules here: https://quarto.org/docs/authoring/markdown-basics."
  },
  {
    "objectID": "basic-workflows/browser.html#commit-and-publish",
    "href": "basic-workflows/browser.html#commit-and-publish",
    "title": "From GitHub.com",
    "section": "Commit and publish",
    "text": "Commit and publish\nCommit your changes by scrolling to the bottom of the page and writing a commit message - a note to yourself and others about what happened. Write your commit message and then click the green “Commit changes” button.\n\n\n\n\n\nNow, click back to the main page of your GitHub repository. You should see the orange dot confirming your website is published. You’ll have to wait for the GitHub Action to tell quarto to build your site for you to see the update, but it will be there!"
  },
  {
    "objectID": "basic-workflows/browser.html#limitations",
    "href": "basic-workflows/browser.html#limitations",
    "title": "From GitHub.com",
    "section": "Limitations",
    "text": "Limitations\nWhile awesome that we can edit using GitHub directly from the browser, there are obvious limitations. One is that to see your edits show up in your book, you have to publish using the GitHub Action. This is slow. Another limitation is that we can only work on one file at a time and commit them each separately, which also is slow. Using additional software can make things much better, as we explore in subsequent chapters."
  },
  {
    "objectID": "basic-workflows/rstudio.html",
    "href": "basic-workflows/rstudio.html",
    "title": "From RStudio",
    "section": "",
    "text": "The RStudio software (called an IDE, integrated development environment) is an excellent way to edit files and interface with GitHub. Plus, as it is made by the same folks who make Quarto, it has many integrated features for streamlining your workflow with Quarto, including how it previews your edits and provides debugging support for yaml! Here is what you’ll need to do to set up and use RStudio."
  },
  {
    "objectID": "basic-workflows/rstudio.html#setup",
    "href": "basic-workflows/rstudio.html#setup",
    "title": "From RStudio",
    "section": "Setup",
    "text": "Setup\n\nRStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. This takes about 20 minutes. (For an even more detailed walk-through, see Allison Horst’s ESM 206 Google Doc). Thanks for sharing Allison!\n\n\nClone your repo\nYou’ll start by cloning your repository into RStudio.\nFile > New Project > Version Control > Git > paste your repository name.\nR for Excel Users: Clone your repository using RStudio has detailed instructions and screenshots of these steps.\n\n\nInstall Quarto\nNext, you’ll install Quarto. Download Quarto from https://quarto.org/docs/get-started/. Follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio (as well as other applications, including the command line).\n\n\nRStudio orientation\nNow let’s take a moment to get oriented. This is an RStudio project, which is indicated in the top-left. The bottom right pane shows all the files in your project; everything we’ve cloned from GitHub.\n\n\n\nRStudio IDE highlighting the project name and files pane\n\n\n\n\nVisual Editor\nThe RStudio Visual Editor is quite new and has features that improve your writing experience.\n\nVisual editor makes a familiar experience\ncopy-paste formatting from Google Doc"
  },
  {
    "objectID": "basic-workflows/rstudio.html#quarto-render",
    "href": "basic-workflows/rstudio.html#quarto-render",
    "title": "From RStudio",
    "section": "Quarto render",
    "text": "Quarto render\nIn the Build tab in the top-right pane, click “Render Website”. This will build the .html files and preview your website. It’s equivalent to “knitting” in RMarkdown.\nNote that you can also click “Preview Website”. With “Render Website” in RStudio, Quarto is able to render and preview in one step.\nIf you’d ever like to stop the preview, in the bottom-left, click on the Jobs tab and then the red Stop button.\n\nMake a small change and render it\nClick on index.md. This will open this markdown file in a fourth pane; the editor pane. Make a small change, for example change to today’s date on Line 4. Then, save your file; there is a disc icon at the top of the file.\nThen, render this file: press “Render” which is to the right of the disc icon that saves the file. This will render only this single file, as opposed to rerendering the whole website like when we clicked “Render Website” in the top right pane. Checking Render on Save (between the disc icon and the Render button) is a great strategy for doing this in one step."
  },
  {
    "objectID": "basic-workflows/rstudio.html#create-a-new-.rmd-page",
    "href": "basic-workflows/rstudio.html#create-a-new-.rmd-page",
    "title": "From RStudio",
    "section": "Create a new .Rmd page",
    "text": "Create a new .Rmd page\nExample:\nload packages and data\nexplore\ntidy\nplot"
  },
  {
    "objectID": "basic-workflows/rstudio.html#update-_quarto.yml",
    "href": "basic-workflows/rstudio.html#update-_quarto.yml",
    "title": "From RStudio",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml"
  },
  {
    "objectID": "basic-workflows/rstudio.html#authoring",
    "href": "basic-workflows/rstudio.html#authoring",
    "title": "From RStudio",
    "section": "Authoring",
    "text": "Authoring"
  },
  {
    "objectID": "basic-workflows/jupyter.html",
    "href": "basic-workflows/jupyter.html",
    "title": "From Jupyter",
    "section": "",
    "text": "You can interact with Quarto through JupyterLab or JupyterHub. Your Jupyter setup will involve .ipynb notebooks and the command line. Quarto’s JupyterLab tutorials has great instructions on getting started with JupyterLab, including computations and authoring.\nHere we will demonstrate how to work with this Quarto tutorial site in JupyterHub and add a Jupyter Notebook (.ipynb file). This example uses the NASA-Openscapes JupyterHub that already has all python environments as well as Quarto installed."
  },
  {
    "objectID": "basic-workflows/jupyter.html#setup",
    "href": "basic-workflows/jupyter.html#setup",
    "title": "From Jupyter",
    "section": "Setup",
    "text": "Setup\n\nJupyterHub\nOur JupyterHub is already setup with python environments as well as Quarto (through nasa-openscapes/corn), so there is no further installation required.\n\n\nClone your repo\nYou’ll start by cloning your repository into JupyterHub. Do this by opening a terminal (File > New > Terminal). In the Terminal, git clone your repository and cd into it:\ngit clone https://github.com/openscapes/quarto-website-tutorial\ncd quarto-website-tutorial\n\n\nQuarto\nQuarto is already installed on the NASA-Openscapes JupyterHub!"
  },
  {
    "objectID": "basic-workflows/jupyter.html#quarto-preview",
    "href": "basic-workflows/jupyter.html#quarto-preview",
    "title": "From Jupyter",
    "section": "Quarto preview",
    "text": "Quarto preview\nLet’s start off by previewing our quarto site locally. In Terminal, type quarto preview, which will provide a URL with a preview of our site!\nquarto preview\n# Preparing to preview\n# Watching files for changes\n# Browse at https://openscapes.2i2c.cloud/user/jules32/proxy/4593/\nCopy this URL into another browser window; and arrange them so you can see them both. I make a bit more space in Jupyter by collapsing the left file menu by clicking on the file icon at the top of the left sidebar.\n\n\n\n\n\n\nMake a small change and preview it\nNow we’ll be able to see live changes in the preview as we edit in our .md files. Let’s try it: Change the date in index.md by opening it from the file directory. Change to today’s date, and save. Your preview window will refresh automatically! If it does not, you can also refresh the page manually. The refreshed previewed site will now display your changes!"
  },
  {
    "objectID": "basic-workflows/jupyter.html#create-a-new-.ipynb-page",
    "href": "basic-workflows/jupyter.html#create-a-new-.ipynb-page",
    "title": "From Jupyter",
    "section": "Create a new .ipynb page",
    "text": "Create a new .ipynb page\nLet’s add a new page to our site. Instead of an .md file like the others, let’s add a .ipynb file.\nFile > New > Notebook. Accept the default kernel by clicking Select.\n\nFirst chunk: raw yaml\nBy default, this Notebook will give us a first chunk that is code. Let’s change it to raw so that we can write our yaml at the top.\n\n\n\n\n\nIn our Raw code chunk, let’s write the title of this document. We need three dashes --- on separate lines preceding and following the title:, which you can name as you’d like.\n---\ntitle: Python Example\n---\n\n\nSecond chunk: Markdown\nLet’s add a new chunk that is Markdown so we can write some description of what this page will be.\nClick the + symbol at the top of the document, and this will add a new chunk, which by default again is a Code chunk. Change it to a Markdown Chunk following the steps we did above when switching to Raw.\nHere, write a little bit of text in Markdown. Since your title is effectively a level-1 header, avoid using level-1 headers in the rest of your document. Here is some example text I wrote:\n## Introduction\n\nThis example has some Python code that will be a part of our Quarto site.\n\n\nThird chunk: Code\nNow let’s create a new chunk with the default Code setting.\nPaste the following code (or write some of your own to test):\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\nNow, go ahead and execute this code chunk like you normally would, by clicking the cursor in a code block and clicking the sideways “play” triangle to run the selected cells (and advance to the next cell). This code produces a plot.\nNote that the code runs as it normally would; the code options in the comments are just comments.\n\n\nSave your file\nSave your document - I’ll call mine python-example.ipynb in the main repository."
  },
  {
    "objectID": "basic-workflows/jupyter.html#update-_quarto.yml",
    "href": "basic-workflows/jupyter.html#update-_quarto.yml",
    "title": "From Jupyter",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we’ll add python-example.ipynb to our _quarto.yml file; this is where we register of all files to include in our site. Let’s add it after the section called “Basic Workflows”.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section. It’s there we see all the file arrangement that we see in the previewed site.\nAdd - python-example.ipynb to line 46, making sure that your indentation aligns with the other pages.\n\n\n\n\n\nYou’ll see that our new page shows up in our Preview, and the code is executed since we did that in the Jupyter Notebook itself. By default, Quarto will not execute code chunks since your computations will likely become more complex and you will want to control when they are executed (or “run”).\nSince Quarto is still previewing our website and the python-example.ipynb, the plot also displays in the notebook after the code is run and the file is saved, as shown below.\n\n\n\n\n\nSo, your normal workflow for creating and running code blocks in your Jupyter Notebook is the same one you’ll use as Quarto displays the preview."
  },
  {
    "objectID": "basic-workflows/jupyter.html#quarto-render",
    "href": "basic-workflows/jupyter.html#quarto-render",
    "title": "From Jupyter",
    "section": "Quarto render",
    "text": "Quarto render\nSo far we have used Quarto preview view our website as we develop it. Quarto render will build the html elements of the website that we can see when we preview. Rendering will format the markdown text and code nicely as a website (or however is indicated in the _quarto.yml).\nBy default, Quarto render does not execute code. Since files can get big and complicated with code, Quarto does not execute code by default. It will never run .ipynb files unless you tell it to.\n\nRender whole notebook\nIf you would like it to specifically execute code in a Jupyter notebook, you can do so in Terminal.\nOur Terminal is still busy previewing our website, so let’s open a new Terminal.\nFile > New > Terminal. Then type:\ncd quarto-website-tutorial\nquarto render python-example.ipynb --execute"
  },
  {
    "objectID": "basic-workflows/jupyter.html#authoring",
    "href": "basic-workflows/jupyter.html#authoring",
    "title": "From Jupyter",
    "section": "Authoring",
    "text": "Authoring\nQuarto.org has details about authoring, including specific instructions about authoring in Jupyter: quarto.org/docs/reference/cells/cells-jupyter."
  },
  {
    "objectID": "basic-workflows/jupyter.html#troubleshooting",
    "href": "basic-workflows/jupyter.html#troubleshooting",
    "title": "From Jupyter",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nMy changes don’t show up in preview\nMake sure you’ve saved your file! There might be a slight delay depending on your JupyterHub/Lab setup.\n\n\nQuarto render hangs / does not complete\nCheck the specific notebook, are there any `—` throughout to denote line breaks rather than yaml? They might be causing the issue; consider deleting those.\nAlso check how long the first raw cell is. Are there level-1 headers (#)? Try removing them."
  },
  {
    "objectID": "basic-workflows/getting-sophisticated.html",
    "href": "basic-workflows/getting-sophisticated.html",
    "title": "Getting Sophisticated",
    "section": "",
    "text": "https://jules32.github.io/rmarkdown-website-tutorial/getting_sophisticated.html"
  },
  {
    "objectID": "quarto-overview.html",
    "href": "quarto-overview.html",
    "title": "Project Team",
    "section": "",
    "text": "Dr. Gavin Fay, UMass Dartmouth - SMAST\nDr. Andrew Lipsky, NEFSC\nDr. Philip Politis, NEFSC"
  },
  {
    "objectID": "quarto-overview.html#quarto-basic-workflow",
    "href": "quarto-overview.html#quarto-basic-workflow",
    "title": "Quarto Overview",
    "section": "Quarto basic workflow",
    "text": "Quarto basic workflow\nDeveloping your quarto site will have the same basic workflow, no matter which tool you use to edit. It is very iterative.\n\nCreate content (text, code, images, etc) in a file. Supported files include .md, .Rmd, .qmd, .ipynb…\nUpdate _quarto.yml as needed (for example, if you’ve created a new file you’d like included in your site)\nQuarto Render individual files and/or the whole website (if editing from the browser this step will not be separate but combined with Step 5)\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically! (if editing from the brower, only commit - no need to push)\nRepeat all of the above"
  },
  {
    "objectID": "quarto-overview.html#quarto.yml",
    "href": "quarto-overview.html#quarto.yml",
    "title": "Project Team",
    "section": "_quarto.yml",
    "text": "_quarto.yml\nLet’s have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example. As you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the “First Observations” we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, “From RStudio” is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website’s sidebar, which is what is happening with the “From RStudio” example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with “First Observations” is what you’ll want to do: you’ll see that only “First Observations” shows up in the sidebar as we specified in _quarto.yml, but the page’s title says “First Observations & Setup” (which in our preference was too long for the sidebar)."
  },
  {
    "objectID": "quarto-overview.html#authoring",
    "href": "quarto-overview.html#authoring",
    "title": "Project Team",
    "section": "Authoring",
    "text": "Authoring\nAs an author, you have a lot of options of how your text will be formatted, arranged, and interlinked. Check out the Quarto documentation about authoring, starting out with https://quarto.org/docs/authoring/markdown-basics, to learn more.\nEach page of our site - currently all .md files - has a similar first couple of lines - this also YAML, and it is indicated by two sets of 3 dashes --- :\n---\ntitle: My title\n---\nYou’re able to add more features to individual pages by including it in the YAML, which for the most part here only includes a title. See Quarto excecution options for more information of what you can include in the YAML."
  },
  {
    "objectID": "quarto-overview.html#learn-more-about-quarto",
    "href": "quarto-overview.html#learn-more-about-quarto",
    "title": "Project Team",
    "section": "Learn more about Quarto",
    "text": "Learn more about Quarto\n\nReproducible authoring with Quarto - Mine Çetinkaya-Rundel, Feb 2022\n\nslides, youtube"
  },
  {
    "objectID": "quarto-overview.html#next-up-workflows",
    "href": "quarto-overview.html#next-up-workflows",
    "title": "Project Team",
    "section": "Next up: workflows",
    "text": "Next up: workflows\nIn the next sections we’ll see what this workflow looks like using different tools for editing your files. We’ll start off from the browser so you don’t need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. See all the tools that are supported at https://quarto.org/docs/get-started/.\nIf you don’t already have a workflow and to edit files and sync to GitHub from your computer, I recommend RStudio. You don’t need to know R to use RStudio, and it has powerful editor features that make for happy workflows."
  },
  {
    "objectID": "sseep-hex.html",
    "href": "sseep-hex.html",
    "title": "Survey Simulation Experimentation and Evaluation Project",
    "section": "",
    "text": "library(hexSticker)\nimgurl <- \"images/survey-turbines.png\"\ns <- sticker(imgurl, package=\"sseep\", p_size=10, p_y = 1.3, s_x=1, s_y=.75, s_width=.6,\n        p_family = \"Roboto\",\n        p_fontface = \"italic\",\n        h_fill = \"#075792\",\n        h_color = \"#147db4\",\n        filename=\"images/sseep-hex.png\")\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Roboto' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Roboto' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Roboto' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Roboto' not found, will use 'sans' instead\n\nplot(s)"
  },
  {
    "objectID": "project-team.html",
    "href": "project-team.html",
    "title": "Project Team",
    "section": "",
    "text": "Dr. Gavin Fay, UMass Dartmouth - SMAST\nDr. Andrew Lipsky, NEFSC\nDr. Philip Politis, NEFSC"
  },
  {
    "objectID": "project-team.html#project-team",
    "href": "project-team.html#project-team",
    "title": "Project Team",
    "section": "Project Team",
    "text": "Project Team\n\nDr. Catherine Foley, NEFSC\nDr. Kathryn Ford, NEFSC\nElizabeth McGovern, NEFSC\nMadeleine Guyant, UMassD-SMAST\nAngelia Miller, UMassD-SMAST\nCatalina Roman, UMssD-SMAST\nDr. Cate O’Keefe, Fishery Apps"
  },
  {
    "objectID": "project-team.html#steering-committee",
    "href": "project-team.html#steering-committee",
    "title": "Project Team",
    "section": "Steering Committee",
    "text": "Steering Committee\n\nDoug Christel, GARFO\nDr. Kathryn Ford, NEFSC\nJim Gartland, VIMS\nUrsula Howson, BOEM\nDr. Michael Pol, ROSA\nDr. David Secor, UMCES\nDr. Michael Sissenwine, NEFMC"
  },
  {
    "objectID": "project-team.html#quarto.yml",
    "href": "project-team.html#quarto.yml",
    "title": "Project Team",
    "section": "_quarto.yml",
    "text": "_quarto.yml\nLet’s have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example. As you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the “First Observations” we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, “From RStudio” is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website’s sidebar, which is what is happening with the “From RStudio” example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with “First Observations” is what you’ll want to do: you’ll see that only “First Observations” shows up in the sidebar as we specified in _quarto.yml, but the page’s title says “First Observations & Setup” (which in our preference was too long for the sidebar)."
  },
  {
    "objectID": "project-team.html#authoring",
    "href": "project-team.html#authoring",
    "title": "Project Team",
    "section": "Authoring",
    "text": "Authoring\nAs an author, you have a lot of options of how your text will be formatted, arranged, and interlinked. Check out the Quarto documentation about authoring, starting out with https://quarto.org/docs/authoring/markdown-basics, to learn more.\nEach page of our site - currently all .md files - has a similar first couple of lines - this also YAML, and it is indicated by two sets of 3 dashes --- :\n---\ntitle: My title\n---\nYou’re able to add more features to individual pages by including it in the YAML, which for the most part here only includes a title. See Quarto excecution options for more information of what you can include in the YAML."
  },
  {
    "objectID": "project-team.html#learn-more-about-quarto",
    "href": "project-team.html#learn-more-about-quarto",
    "title": "Project Team",
    "section": "Learn more about Quarto",
    "text": "Learn more about Quarto\n\nReproducible authoring with Quarto - Mine Çetinkaya-Rundel, Feb 2022\n\nslides, youtube"
  },
  {
    "objectID": "project-team.html#next-up-workflows",
    "href": "project-team.html#next-up-workflows",
    "title": "Project Team",
    "section": "Next up: workflows",
    "text": "Next up: workflows\nIn the next sections we’ll see what this workflow looks like using different tools for editing your files. We’ll start off from the browser so you don’t need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. See all the tools that are supported at https://quarto.org/docs/get-started/.\nIf you don’t already have a workflow and to edit files and sync to GitHub from your computer, I recommend RStudio. You don’t need to know R to use RStudio, and it has powerful editor features that make for happy workflows."
  },
  {
    "objectID": "quarto-overview.html#project-team",
    "href": "quarto-overview.html#project-team",
    "title": "Project Team",
    "section": "Project Team",
    "text": "Project Team\nDr. Catherine Foley, NEFSC\nDr. Kathryn Ford, NEFSC\nElizabeth McGovern, NEFSC\nMadeleine Guyant, UMassD-SMAST\nAngelia Miller, UMassD-SMAST\nCatalina Roman, UMssD-SMAST\nDr. Cate O’Keefe, Fishery Apps"
  },
  {
    "objectID": "quarto-overview.html#steering-committee",
    "href": "quarto-overview.html#steering-committee",
    "title": "Project Team",
    "section": "Steering Committee",
    "text": "Steering Committee\nDeveloping your quarto site will have the same basic workflow, no matter which tool you use to edit. It is very iterative.\n\nCreate content (text, code, images, etc) in a file. Supported files include .md, .Rmd, .qmd, .ipynb…\nUpdate _quarto.yml as needed (for example, if you’ve created a new file you’d like included in your site)\nQuarto Render individual files and/or the whole website (if editing from the browser this step will not be separate but combined with Step 5)\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically! (if editing from the brower, only commit - no need to push)\nRepeat all of the above"
  },
  {
    "objectID": "project-team.html#project-funding",
    "href": "project-team.html#project-funding",
    "title": "Project Team",
    "section": "Project Funding",
    "text": "Project Funding\n\nCooperative Institute for the North Atlantic Region (CINAR)\nNOAA Fisheries Northeast Fisheries Science Center (NEFSC)\nBureau of Ocean Energy Management (BOEM)"
  },
  {
    "objectID": "project-overview.html",
    "href": "project-overview.html",
    "title": "Project Overview",
    "section": "",
    "text": "Project Organization\nSSEEP is a collaboration between University of Massachusetts Dartmouth, NOAA Northeast Fisheries Science Center, the Bureau of Ocean Energy Management, and Fishery Applications Consuling Team. Funding for the UMass Dartmouth SMAST project PI and staff is supported by a NOAA NEFSC award to the Cooperative Institute for the North Atlantic Region (CINAR). The Project Team is supported by a Steering Committee, and through continued engagement with additional partners at NOAA FIsheries as well as stakeholders representing wind and fishery science, management, and industry (see stakeholder workshop section for more information on SSEEP engagement).\n\n\nBackground\nWhen considering multiple use management effects on fisheries (e.g., from infrastructure siting for other marine use sectors), there is a need to not only understand space use effects, but also how impacts to monitoring from spatial changes propagate through to scientific uncertainty in fisheries governance. Changes to the availability of fishery habitat to both fishery independent surveys and fishery dependent data may influence uncertainty associated with data that are key input to stock assessments that provide catch advice. Under current fisheries governance, this increased uncertainty in stock status estimation may result in more precautionary scientific advice (lower quotas) as managers attempt to mitigate risk. Quantifying the effects of this uncertainty in scientific monitoring for fisheries performance is a critical step in understanding system effects of multiple ocean uses, and will help quantify the value and costs associated with alternative monitoring required to mitigate this uncertainty to sustain integrity of data streams for fisheries assessment and management.\nPlanned offshore wind development in the Northeast US and Mid-Atlantic overlaps extensively with the NMFS Bottom Trawl Survey footprints, which have been conducted annually since the 1960s and form the basis of fishery independent data used in stock assessments for commercial and recreationally important fisheries. Based on reviews by BOEM and NMFS, it is likely that bottom trawling will not be able to take place near wind sites, meaning a reduction in resource survey footprints which will interact non-randomly with species distribution and/or life history. Without changes to survey design or consideration of the effects of these changes to the survey footprint, and the evaluation of supplemental monitoring, these changes will diminish the accuracy and representativeness of data the surveys produce and consequently the accuracy downstream of stock assessment models and stock status determinations.\nSSEEP will conduct a series of stakeholder workshops to guide development of a spatial observation simulation model for the Northeast Bottom Trawl Survey that is capable of evaluating the efficacy and statistical properties of changes to survey design and also assess the performance of alternative methods for monitoring groundfish distribution, abundance, and trends. The simulator will be applied to evaluate expected changes in survey data products that will result from spatial reductions in scientific survey coverage due to proposed wind energy installations along the US East Coast, and to assess the efficacy of supplemental monitoring efforts.\n\n\nSSEEP Objectives\n(1) Conduct and facilitate stakeholder workshops aimed at understanding the questions most of interest for the simulation exercise to answer, including the alternatives for survey design and statistical performance measures, and to define a list of scenarios for the mechanisms underlying change (species productivity, distribution) that will form the focus of simulation evaluation.\n(2) Synthesize and perform statistical analyses of the Northeast Bottom Trawl Survey and spatial overlap with wind areas to parameterize an observation model.\n(3) Develop and parameterize a spatially explicit model simulator framework that is capable of emulating observational data from the Northeast Bottom Trawl Surveys and supplemental monitoring methods for a key set of groundfish species\n(4) Conduct simulation testing to evaluate the statistical performance of a stakeholder-based set of plausible alternatives for survey design given a set of ecosystem scenarios and quantify their resulting uncertainty on key data streams used in fishery stock assessment\n\n\nProject Timeline\nYear 1 (2021-2022)\n\nStakeholder workshops to identify research questions and scenarios for simulation evaluations\nSynthesis and statistical analysis of Northeast Bottom Trawl Survey data and spatial overlap with wind areas to parameterize an observation model\nDevelop a spatially explicit model simulator framework capable of emulating observational data from the Northeast Bottom Trawl Surveys and supplemental monitoring methods (continued in year 2)\n\nYear 2 (2022 -2023)\n\nParameterize simulator framework for key set of managed fish species\nSimulation testing to evaluate performance of plausible alternatives for survey design given a set of ecosystem scenarios\nQuantify resulting uncertainty on key data streams used in fishery stock assessment\n\n\n\nAnticipated Project Outcomes\n\nPaths forward for changes to monitoring strategies and their likely consequences in terms of maintaining monitoring data integrity\nRelative ranking for prioritizing changes to survey designs and strategies based on the expected changes for different scenarios and statistical performance\nDescription of desired statistical properties for supplemental sampling strategies to mitigate displacement of bottom trawl survey from wind farm areas, to inform potential new monitoring approaches (e.g., what sorts of data, what level of sampling effort and precision)\nGood enough practices and methods for integrating different sampling methods with heterogeneous environmental surveys that are associated with different spatial processes\nWhich expected scenarios (species, or species distribution drivers) might be most likely to be at risk\nLikely implications of changes to survey sampling for scientific advice (e.g., relative impact on uncertainty in assessments), that can be quantified using Management Strategy Evaluation (MSE).\n\nWhile the initial implementation will be focused on groundfish in the Northeast Bottom Trawl Survey, the model framework developed for this project will be written in an open, general approach such that it can be applied to other instances of multiple ocean use management/overlap, and also in different geographies. The project will also provide training in quantitative fisheries science and collaborative/participatory model building to graduate students and early career scientific staff at the University of Massachusetts Dartmouth."
  },
  {
    "objectID": "project-overview.html#project-team",
    "href": "project-overview.html#project-team",
    "title": "Project Team",
    "section": "Project Team",
    "text": "Project Team\n\nDr. Catherine Foley, NEFSC\nDr. Kathryn Ford, NEFSC\nElizabeth McGovern, NEFSC\nMadeleine Guyant, UMassD-SMAST\nAngelia Miller, UMassD-SMAST\nCatalina Roman, UMssD-SMAST\nDr. Cate O’Keefe, Fishery Apps"
  },
  {
    "objectID": "project-overview.html#steering-committee",
    "href": "project-overview.html#steering-committee",
    "title": "Project Team",
    "section": "Steering Committee",
    "text": "Steering Committee\n\nDoug Christel, GARFO\nDr. Kathryn Ford, NEFSC\nJim Gartland, VIMS\nUrsula Howson, BOEM\nDr. Michael Pol, ROSA\nDr. David Secor, UMCES\nDr. Michael Sissenwine, NEFMC"
  },
  {
    "objectID": "project-overview.html#project-funding",
    "href": "project-overview.html#project-funding",
    "title": "Project Team",
    "section": "Project Funding",
    "text": "Project Funding\n\nCooperative Institute for the North Atlantic Region (CINAR)\nNOAA Fisheries Northeast Fisheries Science Center (NEFSC)\nBureau of Ocean Energy Management (BOEM)"
  },
  {
    "objectID": "workshop_1.html",
    "href": "workshop_1.html",
    "title": "Stakeholder Workshop One",
    "section": "",
    "text": "The first SSEEP stakeholder workshop, held via Zoom in January 2022 was aimed at understanding questions of most interest for the simulation exercise.\nThe workshop was facilitated by Dr. Cate O’Keefe (Fishery Apps).\n\n\n\n\n\n\n\n\n\nIdentify and describe the effects and impacts from offshore wind energy development on the Northeast Fisheries Science Center Bottom Trawl Survey and the survey’s data products.\nThis TOR will include, but not be limited to, the following:\n\nImpacts on survey design, methods, implementation, and performance.\nImpacts on survey data products used to support scientific advice for management of fishery and ecosystem resources.\nDefine key research questions that need to be answered by a simulation modeling study.\n\nIdentify and prioritize methods and approaches to analyze impacts on the NEFSC Bottom Trawl Survey performance and the provision of scientific advice.\nThis TOR will include, but not be limited to, the following\n\nIdentify aspects of a simulation modeling framework needed to support key research questions\n\nData needs\nFeatures of a model to support alternative survey design\nFeatures of a model to support continued survey data products\n\nIdentify methods to analyze and evaluate potential survey adaptation approaches to mitigate the impacts to survey monitoring operations\nIdentify additional technical expertise or gaps in information needed to support simulation design for testing NEFSC Bottom Trawl Survey mitigation"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Us",
    "section": "",
    "text": "If you have any questions about SSEEP, please email Project PIs Dr. Gavin Fay, Dr. Andrew Lipsky, or Dr. Philip Politis."
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Tools",
    "section": "",
    "text": "Tools developed during the SSEEP project\ne.g.\nArcGIS dashboard\nlearnr modeling demo"
  }
]